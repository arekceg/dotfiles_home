[http]
[push]
		                default = simple
[core]
		                autocrlf = true
[pull]
		                rebase = preserve
[https]
[user]
    name  = aceglowski
    email = arekceg@protonmail.com
[color]
    branch = auto
    diff   = auto
    status = auto
    ui     = true
[color "branch"]
    current = yellow reverse
    local   = yellow
    remote  = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old  = red
    new  = cyan
[color "status"]
    added     = green
    changed   = yellow
    untracked = red
[alias]
 
    # Quick shortcuts
    st = status -s
    cl = clone
    ci = commit
    co = checkout
    br = branch
    dw = diff --word-diff
    dc = diff --cached
    rs = reset
 
    logr  = log --graph --decorate --oneline --abbrev-commit
    logra = !git logr --all
 
    # List commits in short form, with colors and branch/tag annotations
    ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
 
    # List commits showing changed files is invoked with git ll
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
 
    # List oneline commits showing dates
    lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
 
    # List oneline commits showing relative dates
    ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
 
    # Show the history of a file, with diffs
    lf = log -u
 
    # Show modified files in last commit
    dl = "!git ll -1"
 
    # Show a diff last commit
    dlc = diff --cached HEAD^
 
    # Show content (full diff) of a commit given a revision
    dr  = "!f() { git diff "$1"^.."$1"; }; f"
    lc  = "!f() { git ll "$1"^.."$1"; }; f"
    diffr  = "!f() { git diff "$1"^.."$1"; }; f"
 
    # Find a file path in codebase
    find = "!git ls-files | grep -i"
 
    # Search/grep your entire codebase for a string
    grep = grep -Ii
 
    # Grep from root folder
    gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
 
    # List all your Aliases
    la = "!git config -l | grep alias | cut -c 7-"
 
    # Show the last tag
    lt = describe --tags --abbrev=0
 
    # Merge aliases
    mours = "!f() { git co --ours $@ && git add $@; }; f"
    mtheirs = "!f() { git co --theirs $@ && git add $@; }; f"
 
    # Lists all ignored files.
    ignored = ls-files --others -i --exclude-standard
 
    # Does a hard reset
    nuke = reset --hard HEAD
 
    # Fetches latest changes
    fap = fetch --all --prune
 
    # Amends the currently staged content to the last commit with the same msg
    amend = !git commit --amend -m \"`git log --format=%B -n 1 HEAD`\"
 
    # Starts the git cli
    cli = !gcli
 
    # Executes a command in the git root
    run = '!exec
 
[core]
    excludesfile = ~/.gitignore
    autocrlf     = input
	editor = gvim -v
[push]
    default = tracking
[pull]
    rebase = true
[diff]
    algorithm = histogram
[difftool]
    prompt = false
[merge]
    ff = false
[mergetool]
    prompt = false
[http]
    sslVerify  = false
    postbuffer = 524288000
[i18n]
    filesEncoding = utf-8
